mean(-c * (base + rnorm(10000000, 0, N_o)))
v1 = integrate(int_function, -200, 200, stop.on.error = FALSE, base = 0, c = 2, N_o = 5.5)
v21
v1
v1 = integrate(int_function, -200, 200, stop.on.error = FALSE, base = 0, c = 2, N_o = 0)
v1 = integrate(int_function, -200, 200, stop.on.error = FALSE, base = 0, c = 2, N_o = 0.001)
v1$value
v1 = integrate(int_function, -200, 200, stop.on.error = FALSE, base = 0, c = 2, N_o = 0.05)
v1$value
v1 = integrate(int_function, -200, 200, stop.on.error = FALSE, base = 0, c = 2, N_o = 0.05)
v2 = integrate(int_function, -200, 200, stop.on.error = FALSE, base = 5, c = 2, N_o = 0.05)
v2$value
v1$value * exp(-2*5)
v1 = expectation_exp(0, 2, 0.05)
v1 * exp(-2*5)
v1
expectation_exp <- function (base, c, N_o){
expect = exp(-c * (base + rnorm(10000000)*N_o))
return(mean(expect, na.rm = TRUE))
}
v1 = expectation_exp(0, 2, 0.05)
v1
v1 * exp(-2*5)
rnorm(10)
rnorm(10)*0.05
exp(rnorm(10)*0.05)
v1 = integrate(int_function, -200, 200, stop.on.error = FALSE, base = 0, c = 2, N_o = 0.05)
v1
v1 = integrate(int_function, -400, 200, stop.on.error = FALSE, base = 0, c = 2, N_o = 0.05)
v1 = integrate(int_function, -300, 200, stop.on.error = FALSE, base = 0, c = 2, N_o = 0.05)
v1
v1 = integrate(int_function, -200, 200, stop.on.error = FALSE, base = 0, c = 2, N_o = 0.05)
v1
v2 = integrate(int_function, -200, 200, stop.on.error = FALSE, base = 5, c = 2, N_o = 0.05)
v1$value / v2$value
exp(0)/exp(-2*5)
exp(0)
v1 = expectation_exp(0, 2, 0.05)
v1
v1 * exp(-2*5)
v2 = expectation_exp(5, 2, .05)
v2
v1 / v2
v1 = expectation_exp(0, 2, 0.55)
v2 = expectation_exp(5, 2, .55)
v1 / v2
v1 = expectation_exp(0, 2, 5.55)
v2 = expectation_exp(5, 2, 5.55)
v1 / v2
v1 = expectation_exp(0, 2, 5.5)
v2 = expectation_exp(5, 2, 5.55)
v1 / v2
expectation_exp <- function (base, c, N_o){
expect = exp(-c * (base + rnorm(100000000)*N_o))
return(mean(expect, na.rm = TRUE))
}
v1 = expectation_exp(0, 2, 5.55)
v2 = expectation_exp(5, 2, 5.55)
v1 / v2
v1 = expectation_exp(0, 2, 5.55)
debugSource('C:/Users/Hsuan-Yu Lin/Dropbox/Model/SOBCS/outputInterference.r')
expect
mean(expect)
average(expact)
max(expect)
mean(expect[expect<99999999999])
library(ggplot2)
int_function <- function (x, base, c, N_o){
exp(-c * (x+base)) * dnorm(x, mean = 0, sd = N_o)
}
expectation_exp <- function (base, c, N_o){
expect = exp(-c * (base + rnorm(100000000)*N_o))
return(mean(expect, na.rm = TRUE))
}
simulateDisplacementAnalytic <- function(sz, output_position, theta, c, N_o){
sp = seq(sz)
act = 1/theta ^ abs(sp-output_position)
p_recall_noisefree = exp(-c*act)/sum(exp(-c*act))
p_target_noisefree = p_recall_noisefree[output_position]
evidance = array()
for (i in seq(sz)){
tmp = integrate(int_function, -200, 200, base = act[i], c = c, N_o = sqrt(2) * N_o)
evidance[i] = tmp$value
}
for (i in seq(sz)){
p_recall_noise[i] = exp(-c*act[i]) / (sum(evidance) - evidance[i] + exp(-c*act[i]))
}
#   p_recall_noise = evidance / sum(evidance)
p_target_noise = p_recall_noise[output_position]
return(p_target_noise)
}
displacement_analystic <- simulateDisplacementAnalytic(6, 3, 0.65, 2, N_o)
N_o = 1.5
displacement_analystic <- simulateDisplacementAnalytic(6, 3, 0.65, 2, N_o)
simulateDisplacementAnalytic <- function(sz, output_position, theta, c, N_o){
sp = seq(sz)
act = 1/theta ^ abs(sp-output_position)
p_recall_noisefree = exp(-c*act)/sum(exp(-c*act))
p_target_noisefree = p_recall_noisefree[output_position]
evidance = array()
for (i in seq(sz)){
tmp = integrate(int_function, -200, 200, base = act[i], c = c, N_o = sqrt(2) * N_o)
evidance[i] = tmp$value
}
p_recall_noise = array()
for (i in seq(sz)){
p_recall_noise[i] = exp(-c*act[i]) / (sum(evidance) - evidance[i] + exp(-c*act[i]))
}
#   p_recall_noise = evidance / sum(evidance)
p_target_noise = p_recall_noise[output_position]
return(p_target_noise)
}
displacement_analystic <- simulateDisplacementAnalytic(6, 3, 0.65, 2, N_o)
displacement_analystic
simulateDisplacement <- function(sz, output_position, theta, c, N_o, n_iter){
displacement = array()
for (i in seq(n_iter)){
sp = seq(sz)
act = 1/theta ^ abs(sp-output_position)
act = act + rnorm(sz, 0, N_o)
p_recall_noise = exp(-c*act)/sum(exp(-c*act))
p_target_noise = p_recall_noise[output_position]
displacement = c(displacement, p_target_noise)
}
return(displacement)
}
displacement = simulateDisplacement(6, 3, 0.65, 2, N_o, 100000)
mean(displacement, na.rm = TRUE)
N_o = 0.00001
displacement = simulateDisplacement(6, 3, 0.65, 2, N_o, 10)
mean(displacement, na.rm = TRUE)
displacement_analystic <- simulateDisplacementAnalytic(6, 3, 0.65, 2, N_o)
displacement_analystic
simulateDisplacement <- function(sz, output_position, theta, c, N_o, n_iter){
displacement = array()
for (i in seq(n_iter)){
sp = seq(sz)
act = 1/theta ^ abs(sp-output_position)
act = act + rnorm(sz, 0, N_o)
p_recall_noise = exp(-c*act)/sum(exp(-c*act))
p_target_noise = p_recall_noise[output_position]
displacement = c(displacement, p_target_noise)
}
return(displacement)
}
simulateDisplacementAnalytic <- function(sz, output_position, theta, c, N_o){
sp = seq(sz)
act = 1/theta ^ abs(sp-output_position)
p_recall_noisefree = exp(-c*act)/sum(exp(-c*act))
p_target_noisefree = p_recall_noisefree[output_position]
evidance = array()
for (i in seq(sz)){
tmp = analystic_exp(act[i], c = c, N_o = sqrt(2) * N_o)
evidance[i] = tmp
}
p_recall_noise = array()
for (i in seq(sz)){
p_recall_noise[i] = exp(-c*act[i]) / (sum(evidance) - evidance[i] + exp(-c*act[i]))
}
#   p_recall_noise = evidance / sum(evidance)
p_target_noise = p_recall_noise[output_position]
return(p_target_noise)
}
analystic_exp <- function (base, c, N_o){
return (exp(-c*base) * exp((1/2) * (c^2) * (N_o^2)))
}
N_o = 0.1
displacement = simulateDisplacement(6, 3, 0.65, 2, N_o, 1000000)
mean(displacement, na.rm = TRUE)
displacement_analystic <- simulateDisplacementAnalytic(6, 3, 0.65, 2, N_o)
displacement_analystic
a = [1, 2, 3, 4]
a = c(1, 2, 3, 4)
a
dim(a)
dim(a) <- c(1, 2)
dim(a)
a
dim(a) <- c(1, 4)
a
dim(a) <- c(4, 1)
a
a(0)
a[1]
a[2]
a[1, 1]
a[1, 2]
b = matrix(c(2, 4, 7, 10), 1, 4)
b
c = matrix(c(3, 6, 2, 1), 4, 1)
d = matrix(c(2, 4, 6, 8, 1, 3, 5, 7), 4, 2)
d
rbind(c(2, 3), c(4, 5))
d = rbind(c(2, 4, 6, 8), c(1, 3, 5, 7))
d
b = t(c(3, 5, 7, 9))
b
a = c(2, 4, 7, 10) #c stands for concatenate
a
t(a)
t(a)
t(t(a))
b = matrix(c(2, 4, 7, 10), 1, 4)
b
c = matrix(c(2, 4, 7, 10), 4, 1)
c
matrix(0, 4, 5)
matrix(1, 3, 2)
y = d[3,2]
d = matrix(c(2, 4, 6, 8, 1, 3, 5, 7), 4, 2)
d
y = d[3,2]
y
y = a[1:3]
y = a[c(1, 3)]
sd = sd(a)
m = mean(a)
std = sd(a)
minimum = min(a)
maximum = max(a)
runif()
runif(5)
rnorm(10)
two = a == 2
a = c(1, 2, 2, 1, 2)
two = a == 2
two
b = matrix(0, 1, 5)
b(a==2) = 1
b[(]a==2] = 1
b[a==2] = 1
b
bt = t(b)
bt
ct = t(c)
ct
ct = t(d)
dt = t(d)
dt
d
d = a + b
d
e = a - b
d = matrix(c(2, 4, 6, 8, 1, 3, 5, 7), 4, 2)
d
g = d + matrix(3, 4, 2)
g
m = a * 2
m
a
n = a * b
n
p = t(a) * b
p
t(a)
t(t(a)) * b
a %*% b
p = a %*% b
outer(a, b)
a
b
p = a %*% b
p
q = a %o% b
q
a = matrix(c(1, 2, 2, 1, 2), 1, 5)
a
p = a %*% b
p = t(a) %*% b
p
q = a %*% t(b)
q
d = b/a
d
M = matrix(0, 1, 10)
for (i in 1:10){
M[i] = i * 2
}
M
i = 0
while (i < 10){
i = i + 1
M(i) = i * 2
}
M[i] = i * 2
i = 0
while (i < 10){
i = i + 1
M[i] = i * 2
}
M
source('~/.active-rstudio-document', echo=TRUE)
i
x = 1:0.1:10
x
x = seq(from = 1, to 10, by = 0.1)
x
x = seq(from = 1, to = 10, by = 0.1)
x
y = 0.5 + 2*x ^ (-0.7)
y
plot(x, y)
plot(x, y, type = 1)
plot(x, y, type = "1")
plo(x, y, type='l')
plot(x, y, type='l')
y2 = 1 + 2*x ^ (-0.7)
y3 = 1 + 10*exp(-2*x)
y2
y3
plot(x, c(y, y2, y3))
plot(x, r(y, y2, y3))
plot(x, rbind(y, y2, y3))
rbind(y, y2, y3)
plot(x, y)
plot(x, y2)
plot(x, y2, x, y)
plot(x, y, type = 'l')
lines(x, y2)
lines(x, y3)
lines(x, y2, col = 'blue')
lines(x, y3, col = 'red')
legend
matplot(x, rbind(y, y2, y3))
x
y
rbind(y, y2, y3)
plot(rbind(x, x, x), rbind(y, y2, y3))
matplot(rbind(x, x, x), rbind(y, y2, y3))
matplot(rbind(x, x, x), rbind(y, y2, y3))
plot(rbind(x, x, x), rbind(y, y2, y3), col = c('black', 'blue', 'red'))
plot(rbind(x, x, x), rbind(y, y2, y3), col = c('black', 'blue', 'red'), type = 'l')
plot(rbind(x, x, x), rbind(y, y2, y3), col = c('black', 'blue', 'red'))
plot(rbind(x, x, x), rbind(y, y2, y3), type = 'l')
plot(x, y, type = 'l')
lines(x, y2, col = 'blue')
lines(x, y3, col = 'red')
plot(rbind(x, x, x), rbind(y, y2, y3), col = c('black', 'blue', 'red'))
help(plot)
atoms = matirx(1, 1, 100)
atoms = matrix(1, 1, 100)
atoms = matrix(1, 1, 100)
t = 1
while (sum(atoms) > 0){
atoms(runif(100)<0.5) = 0
t = t + 1
}
atoms = matrix(1, 1, 100)
t = 1
while (sum(atoms) > 0){
atoms[runif(100)<0.5] = 0
t = t + 1
}
t
setwd("~/GitHub/fate_of_irrelevent_list/src")
source('~/GitHub/fate_of_irrelevent_list/src/Analysis/basic_analysis.R', echo=TRUE)
summary(exp1.data$ID)
exp1.data <- filterOutlier(exp1.data)
filterOutlier <- function(data){
for (i in 1:length(data$ID)){
if (data$RT[i] > 5000){
data$Correctness[i] = NaN
}
if (data$OSCorrectness / data$CLOperations < 0.6){
data$Correctness[i] = NaN
data$RT[i] = NaN
}
}
return(data)
}
exp1.data <- filterOutlier(exp1.data)
filterOutlier <- function(data){
for (i in 1:length(data$ID)){
if (data$RT[i] > 5000){
data$Correctness[i] = NaN
}
if (data$OSCorrectness[i] / data$CLOperations[i] < 0.6){
data$Correctness[i] = NaN
data$RT[i] = NaN
}
}
return(data)
}
exp1.data <- filterOutlier(exp1.data)
source('~/GitHub/fate_of_irrelevent_list/src/Analysis/basic_analysis.R', echo=TRUE)
View(data)
View(data)
source('~/GitHub/fate_of_irrelevent_list/src/Analysis/basic_analysis.R', echo=TRUE)
View(data)
View(data)
source('~/GitHub/fate_of_irrelevent_list/src/Analysis/basic_analysis.R', echo=TRUE)
source('~/GitHub/fate_of_irrelevent_list/src/Analysis/basic_analysis.R', echo=TRUE)
View(exp1.data)
View(exp1.data)
source('~/GitHub/fate_of_irrelevent_list/src/Analysis/basic_analysis.R', echo=TRUE)
source('~/GitHub/fate_of_irrelevent_list/src/Analysis/basic_analysis.R', echo=TRUE)
source('~/GitHub/fate_of_irrelevent_list/src/Analysis/basic_analysis.R', echo=TRUE)
source('~/GitHub/fate_of_irrelevent_list/src/Analysis/basic_analysis.R', echo=TRUE)
source('~/GitHub/fate_of_irrelevent_list/src/Analysis/basic_analysis.R', echo=TRUE)
source('~/GitHub/fate_of_irrelevent_list/src/Analysis/basic_analysis.R', echo=TRUE)
source('~/GitHub/fate_of_irrelevent_list/src/Analysis/basic_analysis.R', echo=TRUE)
source('~/GitHub/fate_of_irrelevent_list/src/Analysis/basic_analysis.R', echo=TRUE)
source('~/GitHub/fate_of_irrelevent_list/src/Analysis/basic_analysis.R', echo=TRUE)
source('~/GitHub/fate_of_irrelevent_list/src/Analysis/basic_analysis.R', echo=TRUE)
source('~/GitHub/fate_of_irrelevent_list/src/Analysis/basic_analysis.R', echo=TRUE)
View(exp1.data)
View(exp1.data)
exp1.data$Correctness[2]
exp1.data$Correctness[2]==FALSE
exp1.data$Correctness[32]
exp1.data$Correctness[32] = NaN
exp1.data$Correctness[32]
exp1.data$Correctness[32]==FALSE
exp1.data$RT[32]==FALSE
exp1.data$RT[32]==NaN
exp1.data$RT[32] > 5000
exp1.data$RT[32]=NaN
exp1.data$RT[32] > 5000
source('~/GitHub/fate_of_irrelevent_list/src/Analysis/basic_analysis.R', echo=TRUE)
source('~/GitHub/fate_of_irrelevent_list/src/Analysis/basic_analysis.R', echo=TRUE)
source('~/GitHub/fate_of_irrelevent_list/src/Analysis/basic_analysis.R', echo=TRUE)
source('~/GitHub/fate_of_irrelevent_list/src/Analysis/basic_analysis.R', echo=TRUE)
source('~/GitHub/fate_of_irrelevent_list/src/Analysis/basic_analysis.R', echo=TRUE)
tmp_data <- data.frame(aggregate(list(data$PC, data$RT), list(data$ProbeType, data$CLOperations), mean))
tmp_data_sd <- data.frame(aggregate(list(data$PC, data$RT), list(data$ProbeType, data$CLOperations), sd))
tmp_data[, 5] <- tmp_data_sd[, 3] / sqrt(10)
tmp_data[, 6] <- tmp_data_sd[, 4] / sqrt(10)
names(tmp_data) <- c('ProbeType', 'CLOperations', 'PC', 'RT', 'PC_SE', 'RT_SE')
pd <- position_dodge(.1)
ggplot(data=tmp_data) + aes(x=CLOperations, y = PC, linetype = ProbeType, group = ProbeType) +
geom_line(position = pd) +
geom_errorbar(aes(ymin=PC-PC_SE, ymax=PC+PC_SE), width=.1, position = pd) +
geom_point(position = pd)
library(ggplot2)
pd <- position_dodge(.1)
ggplot(data=tmp_data) + aes(x=CLOperations, y = PC, linetype = ProbeType, group = ProbeType) +
geom_line(position = pd) +
geom_errorbar(aes(ymin=PC-PC_SE, ymax=PC+PC_SE), width=.1, position = pd) +
geom_point(position = pd)
tmp_data <- data.frame(aggregate(list(data$PC, data$RT), list(data$ProbeType, data$CLOperations), mean))
tmp_data_sd <- data.frame(aggregate(list(data$PC, data$RT), list(data$ProbeType, data$CLOperations), sd))
tmp_data[, 5] <- tmp_data_sd[, 3] / sqrt(10)
tmp_data[, 6] <- tmp_data_sd[, 4] / sqrt(10)
tmp_data <- data.frame(aggregate(list(data$PC, data$RT), list(data$ProbeType, data$CLOperations), mean))
names(data) <- c('ID', 'ProbeType', 'CLOperations', 'PC', 'RT')
tmp_data <- data.frame(aggregate(list(data$PC, data$RT), list(data$ProbeType, data$CLOperations), mean))
tmp_data_sd <- data.frame(aggregate(list(data$PC, data$RT), list(data$ProbeType, data$CLOperations), sd))
tmp_data[, 5] <- tmp_data_sd[, 3] / sqrt(10)
tmp_data[, 6] <- tmp_data_sd[, 4] / sqrt(10)
names(tmp_data) <- c('ProbeType', 'CLOperations', 'PC', 'RT', 'PC_SE', 'RT_SE')
pd <- position_dodge(.1)
ggplot(data=tmp_data) + aes(x=CLOperations, y = PC, linetype = ProbeType, group = ProbeType) +
geom_line(position = pd) +
geom_errorbar(aes(ymin=PC-PC_SE, ymax=PC+PC_SE), width=.1, position = pd) +
geom_point(position = pd)
tmp_data$CLOperations <- factor(tmp_data$CLOperations)
pd <- position_dodge(.1)
ggplot(data=tmp_data) + aes(x=CLOperations, y = PC, linetype = ProbeType, group = ProbeType) +
geom_line(position = pd) +
geom_errorbar(aes(ymin=PC-PC_SE, ymax=PC+PC_SE), width=.1, position = pd) +
geom_point(position = pd)
View(tmp_data)
data <- data.frame(aggregate(list(exp1.data$Correctness, exp1.data$RT), list(exp1.data$ID, exp1.data$CLOperations, exp1.data$ProbeType), mean, na.rm = TRUE))
names(data) <- c('ID', 'CLOperations', 'ProbeType', 'PC', 'RT')
tmp_data <- data.frame(aggregate(list(data$PC, data$RT), list(data$ProbeType, data$CLOperations), mean))
tmp_data_sd <- data.frame(aggregate(list(data$PC, data$RT), list(data$ProbeType, data$CLOperations), sd))
tmp_data[, 5] <- tmp_data_sd[, 3] / sqrt(10)
tmp_data[, 6] <- tmp_data_sd[, 4] / sqrt(10)
names(tmp_data) <- c('ProbeType', 'CLOperations', 'PC', 'RT', 'PC_SE', 'RT_SE')
tmp_data$CLOperations <- factor(tmp_data$CLOperations)
pd <- position_dodge(.1)
ggplot(data=tmp_data) + aes(x=CLOperations, y = PC, linetype = ProbeType, group = ProbeType) +
geom_line(position = pd) +
geom_errorbar(aes(ymin=PC-PC_SE, ymax=PC+PC_SE), width=.1, position = pd) +
geom_point(position = pd)
ggplot(data=tmp_data) + aes(x=CLOperations, y = RT, linetype = ProbeType, group = ProbeType) +
geom_line(position = pd) +
geom_errorbar(aes(ymin=RT-RT_SE, ymax=RT+RT_SE), width=.1, position = pd) +
geom_point(position = pd)
data <- data.frame(aggregate(list(exp1.data$Correctness, exp1.data$RT), list(exp1.data$ID, exp1.data$CLOperations, exp1.data$ProbeType), mean, na.rm = TRUE))
names(data) <- c('ID', 'CLOperations', 'ProbeType', 'PC', 'RT')
data$CLOperations <- factor(data$CLOperations)
tmp_data <- data.frame(aggregate(list(data$PC, data$RT), list(data$ProbeType, data$CLOperations), mean))
tmp_data_sd <- data.frame(aggregate(list(data$PC, data$RT), list(data$ProbeType, data$CLOperations), sd))
tmp_data[, 5] <- tmp_data_sd[, 3] / sqrt(10)
tmp_data[, 6] <- tmp_data_sd[, 4] / sqrt(10)
names(tmp_data) <- c('ProbeType', 'CLOperations', 'PC', 'RT', 'PC_SE', 'RT_SE')
pd <- position_dodge(.1)
ggplot(data=tmp_data) + aes(x=CLOperations, y = PC, linetype = ProbeType, group = ProbeType) +
geom_line(position = pd) +
geom_errorbar(aes(ymin=PC-PC_SE, ymax=PC+PC_SE), width=.1, position = pd) +
geom_point(position = pd)
cl.probetype <- anovaBF(PC ~ ProbeType * CLOperations + pID, data=data, whichRandom = 'pID')
cl.probetype
library(BayesFactor)
cl.probetype <- anovaBF(PC ~ ProbeType * CLOperations + pID, data=data, whichRandom = 'pID')
cl.probetype <- anovaBF(PC ~ ProbeType * CLOperations + ID, data=data, whichRandom = 'ID')
cl.probetype
cl.probetype <- anovaBF(PC ~ ProbeType * CLOperations + ID, data=data[data$ProbeType != 'positive'], whichRandom = 'ID')
data$ProbeType != 'positive'
data[data$ProbeType != 'positive']
data[data$ProbeType != 'positive',]
cl.probetype <- anovaBF(PC ~ ProbeType * CLOperations + ID, data=data[data$ProbeType != 'positive',], whichRandom = 'ID')
cl.probetype
cl.probetype[3] / cl.probetype[4]
cl.probetype <- anovaBF(RT ~ ProbeType * CLOperations + ID, data=data[data$ProbeType != 'positive',], whichRandom = 'ID')
cl.probetype
cl.probetype[3] / cl.probetype[4]
ggplot(data=tmp_data) + aes(x=CLOperations, y = RT, linetype = ProbeType, group = ProbeType) +
geom_line(position = pd) +
geom_errorbar(aes(ymin=RT-RT_SE, ymax=RT+RT_SE), width=.1, position = pd) +
geom_point(position = pd)
